# Copyright (C) 2021 - present Juergen Zimmermann, Hochschule Karlsruhe
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licensesR/>.

# Description in Markdown-Syntax

schema {
  query: Query
  mutation: Mutation
}

"Suche nach Angestelltendaten"
type Query {
  "Suche Angestelltendaten anhand der ID"
  angestellter(id: ID!): Angestellter

  "Suche Angestelltendaten anhand des Nachnamens oder der Emailadresse"
  angestellte(input: Suchkriterien): [Angestellter!]
}

type Mutation {
  "Einen neuen Angestelltendatensatz anlegen"
  create(input: AngestellterInput!): CreatePayload
}

# https://spec.graphql.org/draft/#sec-Types
# https://www.graphql-scalars.dev/docs/scalars/email-address
# https://www.graphql-scalars.dev/docs/scalars/local-date
"Eigenschaften eines Angestellter-Datensatzes mit untergeordneten Eigenschaften"
type Angestellter {
  "ID des Angestellten"
  id: ID
  "Nachname des Angestellten"
  nachname: String!
  email: String!
  kategorie: Int!
  hasNewsletter: Boolean!
  geburtsdatum: String
  homepage: String
  geschlecht: String
  familienstand: String
  interessen: [String!]
  umsatz: Umsatz
  adresse: Adresse!
}

# https://www.graphql-scalars.dev/docs/scalars/currency
"Daten zu einem Umsatz"
type Umsatz {
  "Der Betrag"
  betrag: String!
  "Die Währung"
  waehrung: String!
}

type Adresse {
  "Postleitzahl der Adresse"
  plz: String!
  "Ortsangabe"
  ort: String!
}

# https://spec.graphql.org/draft/#sec-Input-Objects
"Suchkriterien für die Query 'angestellte'"
input Suchkriterien {
  "Nachname der gesuchten Angestellten"
  nachname: String
  "Emailadresse der gesuchten Angestellten"
  email: String
}

"Eingabedaten für einen neuen Angestellten"
input AngestellterInput {
  "Nachname des neuen Angestellten"
  nachname: String!
  "Emailadresse des neuen Angestellten"
  email: String!
  kategorie: Int!
  "Newsletter-Abo: true / false"
  hasNewsletter: Boolean!
  "Geburtsdatum des neuen Angestellten"
  geburtsdatum: String
  homepage: String
  "Geschlecht des neuen Angestellten: MAENNLICH, WEIBLICH, DIVERS"
  geschlecht: Geschlecht
  "Familienstand des neuen Angestellten: LEDIG, VERHEIRATET, GESCHIEDEN, VERWITWET"
  familienstand: Familienstand
  "InteressEN des neuen Angestellten: SPORT, LESEN, REISEN"
  interessen: [Interesse!]
  "Umsatzangabe zum neuen Angestellten"
  umsatz: UmsatzInput
  "Adresse des neuen Angestellten"
  adresse: AdresseInput!
}

"Aufzählungstyp für das Geschlecht eines Angestellten"
enum Geschlecht {
  WEIBLICH
  MAENNLICH
  DIVERS
}

"Aufzählungstyp für den Familienstand eines Angestellten"
enum Familienstand {
  LEDIG
  VERHEIRATET
  GESCHIEDEN
  VERWITWET
}

"Aufzählungstyp für die Interessen eines Angestellten"
enum Interesse {
  SPORT
  LESEN
  REISEN
}

"Umsatzeingabe für einen Angestellten: Neuanlegen oder Ändern"
input UmsatzInput {
  "Betrag"
  betrag: String!
  "Währung"
  waehrung: String!
}

"Neue oder geänderte Adresse"
input AdresseInput {
  plz: String!
  ort: String!
}

"Rückgabetyp beim Neuanlegen eines Angestellten"
type CreatePayload {
  "ID des neu angelegten Angestellten"
  id: String!
}
